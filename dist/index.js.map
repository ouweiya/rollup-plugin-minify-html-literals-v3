{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,MAA0B,MAAM,sBAAsB,CAAC;AAE9D,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AA+BnD,MAAM,CAAC,OAAO,WAAW,UAAmB,EAAE;IAC5C,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE;QAC/B,OAAO,CAAC,kBAAkB,GAAG,MAAM,CAAC,kBAAkB,CAAC;KACxD;IAED,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QACnB,OAAO,CAAC,MAAM,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;KACjE;IAED,MAAM,aAAa,GAAmB,OAAO,CAAC,OAAO,IAAI,EAAE,CAAC;IAE5D,OAAO;QACL,IAAI,EAAE,sBAAsB;QAC5B,SAAS,CAAC,IAAI,EAAE,EAAE;YAChB,IAAI,OAAO,CAAC,MAAO,CAAC,EAAE,CAAC,EAAE;gBACvB,IAAI;oBACF,MAAM,MAAM,GAAsB,OAAO,CAAC,kBAAmB,CAAC,IAAI,EAAE,EAAE,GAAG,aAAa,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;oBACxG,OAAO,MAAM,CAAC;iBACf;gBAAC,OAAO,KAAK,EAAE;oBACd,MAAM,OAAO,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAE,KAAgB,CAAC;oBAE3E,IAAI,OAAO,CAAC,WAAW,EAAE;wBACvB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;qBACrB;yBAAM;wBACL,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBACpB;iBACF;aACF;YACD,OAAO,IAAI,CAAC;QACd,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["import minify, { DefaultOptions } from 'minify-html-literals';\r\nimport type { Plugin, SourceDescription } from 'rollup';\r\nimport { createFilter } from '@rollup/pluginutils';\r\n\r\nexport interface Options {\r\n  /**\r\n   * Pattern or array of patterns of files to minify.\r\n   */\r\n  include?: string | string[];\r\n  /**\r\n   * Pattern or array of patterns of files not to minify.\r\n   */\r\n  exclude?: string | string[];\r\n  /**\r\n   * Minify options, see\r\n   * https://www.npmjs.com/package/minify-html-literals#options.\r\n   */\r\n  options?: Partial<minify.Options>;\r\n  /**\r\n   * If true, any errors while parsing or minifying will abort the bundle\r\n   * process. Defaults to false, which will only show a warning.\r\n   */\r\n  failOnError?: boolean;\r\n  /**\r\n   * Override minify-html-literals function.\r\n   */\r\n  minifyHTMLLiterals?: typeof minify.minifyHTMLLiterals;\r\n  /**\r\n   * Override include/exclude filter.\r\n   */\r\n  filter?: (id: string) => boolean;\r\n}\r\n\r\nexport default function (options: Options = {}): Plugin {\r\n  if (!options.minifyHTMLLiterals) {\r\n    options.minifyHTMLLiterals = minify.minifyHTMLLiterals;\r\n  }\r\n\r\n  if (!options.filter) {\r\n    options.filter = createFilter(options.include, options.exclude);\r\n  }\r\n\r\n  const minifyOptions = <DefaultOptions>options.options || {};\r\n\r\n  return {\r\n    name: 'minify-html-literals',\r\n    transform(code, id) {\r\n      if (options.filter!(id)) {\r\n        try {\r\n          const result = <SourceDescription>options.minifyHTMLLiterals!(code, { ...minifyOptions, fileName: id });\r\n          return result;\r\n        } catch (error) {\r\n          const message = error instanceof Error ? error.message : (error as string);\r\n\r\n          if (options.failOnError) {\r\n            this.error(message);\r\n          } else {\r\n            this.warn(message);\r\n          }\r\n        }\r\n      }\r\n      return null;\r\n    },\r\n  };\r\n}\r\n"]}